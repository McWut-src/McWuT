@page
@model McWuT.Web.Pages.PasswordVault.EditModel
@{
    ViewData["Title"] = "Edit Password Entry";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="bi bi-pencil me-2"></i>Edit Password Entry
                    </h4>
                </div>
                <div class="card-body">
                    <form method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3" role="alert"></div>
                        
                        <div class="mb-3">
                            <label asp-for="Input.Name" class="form-label">
                                <i class="bi bi-tag me-1"></i>@Html.DisplayNameFor(m => m.Input.Name) <span class="text-danger">*</span>
                            </label>
                            <input asp-for="Input.Name" class="form-control" placeholder="e.g., My Gmail Account, Work VPN, etc." />
                            <span asp-validation-for="Input.Name" class="text-danger"></span>
                            <div class="form-text">
                                <small>A descriptive name to identify this entry.</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.Website" class="form-label">
                                <i class="bi bi-globe me-1"></i>@Html.DisplayNameFor(m => m.Input.Website)
                            </label>
                            <input asp-for="Input.Website" class="form-control" placeholder="e.g., google.com, facebook.com" />
                            <span asp-validation-for="Input.Website" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.Username" class="form-label">
                                <i class="bi bi-person me-1"></i>@Html.DisplayNameFor(m => m.Input.Username)
                            </label>
                            <input asp-for="Input.Username" class="form-control" placeholder="Username or email address" />
                            <span asp-validation-for="Input.Username" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.Password" class="form-label">
                                <i class="bi bi-key me-1"></i>@Html.DisplayNameFor(m => m.Input.Password)
                            </label>
                            <div class="input-group">
                                <input asp-for="Input.Password" class="form-control" type="password" id="passwordInput" placeholder="Leave blank to keep current password" />
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePasswordVisibility()">
                                    <i class="bi bi-eye" id="passwordToggleIcon"></i>
                                </button>
                                <button type="button" class="btn btn-outline-info" onclick="generatePassword()">
                                    <i class="bi bi-arrow-clockwise"></i> Generate
                                </button>
                                @if (!string.IsNullOrEmpty(Model.Entry?.EncryptedPassword))
                                {
                                    <button type="button" class="btn btn-outline-warning" onclick="showCurrentPassword()">
                                        <i class="bi bi-eye-fill"></i> Show Current
                                    </button>
                                }
                            </div>
                            <span asp-validation-for="Input.Password" class="text-danger"></span>
                            <div class="form-text">
                                <small>Leave blank to keep the current password unchanged.</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.Category" class="form-label">
                                <i class="bi bi-tag me-1"></i>@Html.DisplayNameFor(m => m.Input.Category)
                            </label>
                            <input asp-for="Input.Category" class="form-control" list="categoryOptions" placeholder="e.g., Social Media, Banking, Work" />
                            <datalist id="categoryOptions">
                                <option value="Social Media"/>
                                <option value="Banking"/>
                                <option value="Work"/>
                                <option value="Email"/>
                                <option value="Shopping"/>
                                <option value="Entertainment"/>
                                <option value="Utilities"/>
                                <option value="Other"/>
                            </datalist>
                            <span asp-validation-for="Input.Category" class="text-danger"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="Input.Notes" class="form-label">
                                <i class="bi bi-journal-text me-1"></i>@Html.DisplayNameFor(m => m.Input.Notes)
                            </label>
                            <textarea asp-for="Input.Notes" class="form-control" rows="3" placeholder="Additional notes or security questions..."></textarea>
                            <span asp-validation-for="Input.Notes" class="text-danger"></span>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a asp-page="./Index" class="btn btn-outline-secondary me-md-2">
                                <i class="bi bi-arrow-left me-1"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-lg me-1"></i>Update Entry
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Current Password Modal -->
<div class="modal fade" id="currentPasswordModal" tabindex="-1" aria-labelledby="currentPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="currentPasswordModalLabel">
                    <i class="bi bi-key me-2"></i>Current Password
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="input-group">
                    <input type="text" class="form-control" id="currentPasswordDisplay" readonly>
                    <button type="button" class="btn btn-outline-secondary" onclick="copyCurrentPassword()">
                        <i class="bi bi-clipboard"></i> Copy
                    </button>
                </div>
                <small class="text-muted">This is the currently stored password for this entry.</small>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        function togglePasswordVisibility() {
            const passwordInput = document.getElementById('passwordInput');
            const toggleIcon = document.getElementById('passwordToggleIcon');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                toggleIcon.className = 'bi bi-eye-slash';
            } else {
                passwordInput.type = 'password';
                toggleIcon.className = 'bi bi-eye';
            }
        }

        function generatePassword() {
            const length = 16;
            const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%^&*()_+-=[]{}|;:,.<>?";
            let password = "";
            
            // Ensure at least one character from each category
            const lowercase = "abcdefghijklmnopqrstuvwxyz";
            const uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const numbers = "0123456789";
            const symbols = "!#$%^&*()_+-=[]{}|;:,.<>?";
            
            password += lowercase[Math.floor(Math.random() * lowercase.length)];
            password += uppercase[Math.floor(Math.random() * uppercase.length)];
            password += numbers[Math.floor(Math.random() * numbers.length)];
            password += symbols[Math.floor(Math.random() * symbols.length)];
            
            // Fill the rest randomly
            for (let i = 4; i < length; i++) {
                password += charset[Math.floor(Math.random() * charset.length)];
            }
            
            // Shuffle the password
            password = password.split('').sort(() => Math.random() - 0.5).join('');
            
            document.getElementById('passwordInput').value = password;
            
            // Show password temporarily
            const passwordInput = document.getElementById('passwordInput');
            const toggleIcon = document.getElementById('passwordToggleIcon');
            passwordInput.type = 'text';
            toggleIcon.className = 'bi bi-eye-slash';
        }

        async function showCurrentPassword() {
            const entryId = '@Model.Entry?.UniqueId';
            
            try {
                const formData = new FormData();
                formData.append('id', entryId);
                
                const response = await fetch(`?handler=RevealCurrentPassword`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('currentPasswordDisplay').value = data.password;
                    const modal = new bootstrap.Modal(document.getElementById('currentPasswordModal'));
                    modal.show();
                } else {
                    alert('Failed to retrieve current password');
                }
            } catch (error) {
                alert('Error retrieving current password');
                console.error(error);
            }
        }

        function copyCurrentPassword() {
            const passwordField = document.getElementById('currentPasswordDisplay');
            passwordField.select();
            navigator.clipboard.writeText(passwordField.value).then(() => {
                // Show feedback
                const copyBtn = event.target.closest('button');
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = '<i class="bi bi-check"></i> Copied!';
                setTimeout(() => {
                    copyBtn.innerHTML = originalText;
                }, 2000);
            });
        }

        // Clear password when modal is hidden
        document.getElementById('currentPasswordModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById('currentPasswordDisplay').value = '';
        });
    </script>
}