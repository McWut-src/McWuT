@page
@model McWuT.Web.Pages.Tools.RandomUserModel
@{
    ViewData["Title"] = "Random User Generator";
}

<div class="container py-4" id="randomuser-root">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0"><i class="bi bi-people me-2"></i>Random User Generator</h2>
    </div>

    <div id="alertContainer" class="d-none">
        <div class="alert alert-dismissible fade show" role="alert" id="alertElement">
            <i class="bi bi-exclamation-triangle me-2" id="alertIcon"></i>
            <span id="alertMessage">Error occurred</span>
            <button type="button" class="btn-close" aria-label="Close" onclick="hideAlert()"></button>
        </div>
    </div>

    <!-- Configuration Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-gear me-2"></i>Configuration</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="resultsCount" class="form-label">Number of Users</label>
                    <select id="resultsCount" class="form-select">
                        <option value="1">1</option>
                        <option value="5" selected>5</option>
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="genderSelect" class="form-label">Gender</label>
                    <select id="genderSelect" class="form-select">
                        <option value="">Both</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="nationalitySelect" class="form-label">Nationality</label>
                    <select id="nationalitySelect" class="form-select">
                        <option value="">Any</option>
                        <option value="us">United States</option>
                        <option value="gb">United Kingdom</option>
                        <option value="ca">Canada</option>
                        <option value="au">Australia</option>
                        <option value="de">Germany</option>
                        <option value="fr">France</option>
                        <option value="es">Spain</option>
                        <option value="br">Brazil</option>
                        <option value="dk">Denmark</option>
                        <option value="fi">Finland</option>
                        <option value="no">Norway</option>
                        <option value="nl">Netherlands</option>
                        <option value="nz">New Zealand</option>
                        <option value="ch">Switzerland</option>
                        <option value="ie">Ireland</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button id="generateBtn" class="btn btn-primary w-100">
                        <i class="bi bi-arrow-clockwise me-2"></i>Generate Users
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Section -->
    <div id="loadingSection" class="text-center d-none py-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Generating random users...</p>
    </div>

    <!-- Results Section -->
    <div id="resultsSection" class="d-none">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="mb-0">Generated Users (<span id="userCount">0</span>)</h4>
            <div class="btn-group">
                <button id="exportJsonBtn" class="btn btn-outline-primary btn-sm">
                    <i class="bi bi-file-earmark-code me-1"></i>Export JSON
                </button>
                <button id="exportCsvBtn" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-file-earmark-spreadsheet me-1"></i>Export CSV
                </button>
                <div class="btn-group" role="group">
                    <button id="viewToggle" type="button" class="btn btn-outline-info btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-grid-3x3-gap me-1"></i>Card View
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" data-view="cards"><i class="bi bi-grid-3x3-gap me-2"></i>Card View</a></li>
                        <li><a class="dropdown-item" href="#" data-view="table"><i class="bi bi-table me-2"></i>Table View</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Card View -->
        <div id="cardView" class="row g-4">
            <!-- User cards will be dynamically inserted here -->
        </div>

        <!-- Table View -->
        <div id="tableView" class="d-none">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Photo</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Location</th>
                            <th>Age</th>
                            <th>Gender</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        <!-- Table rows will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
(() => {
    const alertContainer = document.getElementById('alertContainer');
    const alertMessage = document.getElementById('alertMessage');
    const loadingSection = document.getElementById('loadingSection');
    const resultsSection = document.getElementById('resultsSection');
    const cardView = document.getElementById('cardView');
    const tableView = document.getElementById('tableView');
    const tableBody = document.getElementById('tableBody');
    const userCount = document.getElementById('userCount');
    const viewToggle = document.getElementById('viewToggle');
    
    let currentUsers = [];
    let currentView = 'cards';

    // Utility functions
    function showAlert(message, type = 'danger') {
        const alertElement = document.getElementById('alertElement');
        const alertIcon = document.getElementById('alertIcon');
        
        alertMessage.textContent = message;
        alertElement.className = `alert alert-${type} alert-dismissible fade show`;
        
        if (type === 'info') {
            alertIcon.className = 'bi bi-info-circle me-2';
        } else {
            alertIcon.className = 'bi bi-exclamation-triangle me-2';
        }
        
        alertContainer.classList.remove('d-none');
    }

    window.hideAlert = function() {
        alertContainer.classList.add('d-none');
    }

    function showLoading() {
        loadingSection.classList.remove('d-none');
        resultsSection.classList.add('d-none');
        hideAlert();
    }

    function hideLoading() {
        loadingSection.classList.add('d-none');
    }

    function formatAddress(location) {
        const { street, city, state, country, postcode } = location;
        return `${street.number} ${street.name}, ${city}, ${state}, ${country} ${postcode}`;
    }

    function createUserCard(user) {
        const fullName = `${user.name.title} ${user.name.first} ${user.name.last}`;
        const address = formatAddress(user.location);
        
        return `
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm user-card">
                    <div class="card-body text-center">
                        <img src="${user.picture.large}" alt="${fullName}" class="rounded-circle mb-3" style="width: 80px; height: 80px; object-fit: cover;">
                        <h5 class="card-title">${fullName}</h5>
                        <p class="card-text">
                            <small class="text-muted">Age: ${user.dob.age} â€¢ ${user.gender.charAt(0).toUpperCase() + user.gender.slice(1)}</small>
                        </p>
                        <div class="text-start">
                            <p class="mb-1"><i class="bi bi-envelope me-2"></i><small>${user.email}</small></p>
                            <p class="mb-1"><i class="bi bi-telephone me-2"></i><small>${user.phone}</small></p>
                            <p class="mb-1"><i class="bi bi-geo-alt me-2"></i><small>${address}</small></p>
                            <p class="mb-0"><i class="bi bi-calendar me-2"></i><small>Born: ${new Date(user.dob.date).toLocaleDateString()}</small></p>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-outline-primary btn-sm w-100" onclick="showUserDetails('${user.login.uuid}')">
                            <i class="bi bi-eye me-1"></i>View Details
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    function createTableRow(user) {
        const fullName = `${user.name.title} ${user.name.first} ${user.name.last}`;
        const location = `${user.location.city}, ${user.location.country}`;
        
        return `
            <tr>
                <td>
                    <img src="${user.picture.thumbnail}" alt="${fullName}" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;">
                </td>
                <td>${fullName}</td>
                <td>${user.email}</td>
                <td>${user.phone}</td>
                <td>${location}</td>
                <td>${user.dob.age}</td>
                <td>${user.gender.charAt(0).toUpperCase() + user.gender.slice(1)}</td>
            </tr>
        `;
    }

    function displayUsers() {
        if (currentView === 'cards') {
            cardView.innerHTML = currentUsers.map(createUserCard).join('');
            cardView.classList.remove('d-none');
            tableView.classList.add('d-none');
        } else {
            tableBody.innerHTML = currentUsers.map(createTableRow).join('');
            tableView.classList.remove('d-none');
            cardView.classList.add('d-none');
        }
        userCount.textContent = currentUsers.length;
        resultsSection.classList.remove('d-none');
    }

    // API call function
    async function generateUsers() {
        const resultsCount = document.getElementById('resultsCount').value;
        const gender = document.getElementById('genderSelect').value;
        const nationality = document.getElementById('nationalitySelect').value;

        let url = `/api/randomuser?results=${resultsCount}`;
        if (gender) url += `&gender=${gender}`;
        if (nationality) url += `&nat=${nationality}`;

        showLoading();

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            currentUsers = data.results;
            displayUsers();
        } catch (error) {
            console.error('Error fetching users:', error);
            // Fallback to mock data for demonstration
            generateMockUsers(parseInt(resultsCount), gender, nationality);
        } finally {
            hideLoading();
        }
    }

    // Mock data generator for demonstration when API is unavailable
    function generateMockUsers(count, gender, nationality) {
        const mockUsers = [];
        const firstNames = {
            male: ['John', 'Michael', 'David', 'James', 'Robert', 'William', 'Richard', 'Joseph'],
            female: ['Mary', 'Patricia', 'Jennifer', 'Linda', 'Elizabeth', 'Barbara', 'Susan', 'Jessica']
        };
        const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'];
        const countries = ['United States', 'United Kingdom', 'Canada', 'Australia', 'Germany'];
        const cities = ['New York', 'London', 'Toronto', 'Sydney', 'Berlin', 'Paris', 'Madrid'];

        for (let i = 0; i < count; i++) {
            const userGender = gender || (Math.random() > 0.5 ? 'male' : 'female');
            const firstName = firstNames[userGender][Math.floor(Math.random() * firstNames[userGender].length)];
            const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];
            const city = cities[Math.floor(Math.random() * cities.length)];
            const country = countries[Math.floor(Math.random() * countries.length)];
            const age = Math.floor(Math.random() * 60) + 18;
            
            const mockUser = {
                name: {
                    title: userGender === 'male' ? 'Mr' : (Math.random() > 0.5 ? 'Mrs' : 'Ms'),
                    first: firstName,
                    last: lastName
                },
                email: firstName.toLowerCase() + '.' + lastName.toLowerCase() + '@@demo.com',
                phone: `(${Math.floor(Math.random() * 900) + 100}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,
                cell: `(${Math.floor(Math.random() * 900) + 100}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,
                gender: userGender,
                dob: {
                    age: age,
                    date: new Date(Date.now() - age * 365 * 24 * 60 * 60 * 1000).toISOString()
                },
                location: {
                    street: {
                        number: Math.floor(Math.random() * 9999) + 1,
                        name: `${['Main', 'Oak', 'Pine', 'Maple', 'Cedar'][Math.floor(Math.random() * 5)]} St`
                    },
                    city: city,
                    state: ['CA', 'NY', 'TX', 'FL', 'WA'][Math.floor(Math.random() * 5)],
                    country: country,
                    postcode: Math.floor(Math.random() * 90000) + 10000
                },
                picture: {
                    large: `https://via.placeholder.com/150x150/4299e1/ffffff?text=${firstName[0]}${lastName[0]}`,
                    thumbnail: `https://via.placeholder.com/50x50/4299e1/ffffff?text=${firstName[0]}${lastName[0]}`
                },
                login: {
                    uuid: `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 4)}`,
                    username: `${firstName.toLowerCase()}${Math.floor(Math.random() * 1000)}`
                }
            };
            mockUsers.push(mockUser);
        }

        currentUsers = mockUsers;
        displayUsers();
        
        // Show info about using mock data
        showAlert('Using demo data - API unavailable in current environment', 'info');
        setTimeout(hideAlert, 3000);
    }

    // Export functions
    function exportJson() {
        const blob = new Blob([JSON.stringify(currentUsers, null, 2)], { 
            type: 'application/json;charset=utf-8' 
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `random-users-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    function exportCsv() {
        const headers = ['Name', 'Email', 'Phone', 'Gender', 'Age', 'City', 'Country', 'Address'];
        const csvContent = [
            headers.join(','),
            ...currentUsers.map(user => [
                `"${user.name.title} ${user.name.first} ${user.name.last}"`,
                user.email,
                user.phone,
                user.gender,
                user.dob.age,
                `"${user.location.city}"`,
                `"${user.location.country}"`,
                `"${formatAddress(user.location)}"`
            ].join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `random-users-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // User details modal (simplified - shows alert with details)
    window.showUserDetails = function(uuid) {
        const user = currentUsers.find(u => u.login.uuid === uuid);
        if (user) {
            const fullName = `${user.name.title} ${user.name.first} ${user.name.last}`;
            const details = `
Name: ${fullName}
Email: ${user.email}
Phone: ${user.phone}
Cell: ${user.cell}
Gender: ${user.gender}
Age: ${user.dob.age}
Born: ${new Date(user.dob.date).toLocaleDateString()}
Address: ${formatAddress(user.location)}
Username: ${user.login.username}
            `;
            alert(details); // In a real app, you'd use a proper modal
        }
    };

    // Event listeners
    document.getElementById('generateBtn').addEventListener('click', generateUsers);
    document.getElementById('exportJsonBtn').addEventListener('click', exportJson);
    document.getElementById('exportCsvBtn').addEventListener('click', exportCsv);

    // View toggle
    document.querySelectorAll('[data-view]').forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const view = e.target.closest('[data-view]').dataset.view;
            currentView = view;
            
            if (view === 'cards') {
                viewToggle.innerHTML = '<i class="bi bi-grid-3x3-gap me-1"></i>Card View';
            } else {
                viewToggle.innerHTML = '<i class="bi bi-table me-1"></i>Table View';
            }
            
            if (currentUsers.length > 0) {
                displayUsers();
            }
        });
    });

    // Generate initial users on page load
    generateUsers();
})();
</script>

<style>
    #randomuser-root .user-card {
        transition: transform 0.2s ease-in-out;
    }
    
    #randomuser-root .user-card:hover {
        transform: translateY(-5px);
    }
    
    #randomuser-root .table img {
        border: 2px solid #dee2e6;
    }
</style>
}