@page
@model McWuT.Web.Pages.Tools.Base64ConverterModel
@{
    ViewData["Title"] = "Base64 Encoder/Decoder";
}

<div class="container py-4" id="base64-root">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0"><i class="bi bi-file-earmark-code me-2"></i>Base64 Encoder/Decoder</h2>
        <div class="btn-group" role="group" aria-label="Mode selector">
            <input type="radio" class="btn-check" name="modeOptions" id="encodeMode" autocomplete="off" checked>
            <label class="btn btn-outline-primary" for="encodeMode"><i class="bi bi-lock me-1"></i>Encode</label>
            
            <input type="radio" class="btn-check" name="modeOptions" id="decodeMode" autocomplete="off">
            <label class="btn btn-outline-primary" for="decodeMode"><i class="bi bi-unlock me-1"></i>Decode</label>
        </div>
    </div>

    <div id="alertContainer" class="d-none">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <span id="alertMessage">Invalid input</span>
            <button type="button" class="btn-close" aria-label="Close" onclick="hideAlert()"></button>
        </div>
    </div>

    <div class="row g-3 align-items-stretch" id="panesRow">
        <!-- Input Pane -->
        <div class="col-12 col-lg-6" id="inputPane">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <strong id="inputPaneTitle"><i class="bi bi-input-cursor me-2"></i>Text Input</strong>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="copyInputBtn" title="Copy to clipboard">
                            <i class="bi bi-clipboard"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="downloadInputBtn" title="Download as file">
                            <i class="bi bi-download"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="uploadFileBtn" title="Upload file">
                            <i class="bi bi-upload"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="maximizeInputBtn" title="Maximize">
                            <i class="bi bi-arrows-fullscreen"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body d-flex flex-column">
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="fileUploadMode">
                            <label class="form-check-label" for="fileUploadMode">
                                <i class="bi bi-file-earmark me-1"></i>File Mode (for binary files)
                            </label>
                        </div>
                    </div>
                    <textarea id="textInput" class="form-control flex-grow-1" placeholder="Enter text to encode..." spellcheck="false" rows="16"></textarea>
                    <input type="file" id="fileInput" class="form-control mt-2 d-none" accept="*/*">
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <small class="text-muted" id="inputStats">0 characters</small>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary" type="button" id="clearInputBtn"><i class="bi bi-x-circle me-1"></i>Clear</button>
                            <button class="btn btn-primary" type="button" id="convertBtn"><i class="bi bi-arrow-right me-1"></i>Convert</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Output Pane -->
        <div class="col-12 col-lg-6" id="outputPane">
            <div class="card h-100 shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <strong id="outputPaneTitle"><i class="bi bi-file-earmark-code me-2"></i>Base64 Output</strong>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="copyOutputBtn" title="Copy to clipboard">
                            <i class="bi bi-clipboard"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="downloadOutputBtn" title="Download as file">
                            <i class="bi bi-download"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" type="button" id="maximizeOutputBtn" title="Maximize">
                            <i class="bi bi-arrows-fullscreen"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body d-flex flex-column">
                    <pre class="flex-grow-1 mb-0 bg-body-tertiary rounded p-3 overflow-auto" id="textOutput" aria-live="polite"></pre>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <small class="text-muted" id="outputStats">0 characters</small>
                        <button class="btn btn-outline-primary" type="button" id="swapBtn" title="Swap input and output">
                            <i class="bi bi-arrow-left-right me-1"></i>Swap
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-lightning me-2"></i>Quick Actions</h6>
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        <div class="col-12 col-sm-6 col-md-3">
                            <button class="btn btn-outline-info w-100" type="button" id="sampleTextBtn">
                                <i class="bi bi-file-text me-1"></i>Sample Text
                            </button>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3">
                            <button class="btn btn-outline-info w-100" type="button" id="urlSafeBtn">
                                <i class="bi bi-link me-1"></i>URL Safe Mode
                            </button>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3">
                            <button class="btn btn-outline-info w-100" type="button" id="validateBtn">
                                <i class="bi bi-check-circle me-1"></i>Validate Base64
                            </button>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3">
                            <button class="btn btn-outline-warning w-100" type="button" id="formatBtn">
                                <i class="bi bi-justify me-1"></i>Format Output
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
(() => {
    // DOM elements
    const textInput = document.getElementById('textInput');
    const textOutput = document.getElementById('textOutput');
    const fileInput = document.getElementById('fileInput');
    const fileUploadMode = document.getElementById('fileUploadMode');
    const encodeMode = document.getElementById('encodeMode');
    const decodeMode = document.getElementById('decodeMode');
    const alertContainer = document.getElementById('alertContainer');
    const alertMessage = document.getElementById('alertMessage');
    const inputStats = document.getElementById('inputStats');
    const outputStats = document.getElementById('outputStats');
    const inputPaneTitle = document.getElementById('inputPaneTitle');
    const outputPaneTitle = document.getElementById('outputPaneTitle');
    
    let urlSafeMode = false;
    let formatOutput = false;

    // Accessibility helpers
    function showAlert(message, type = 'danger') {
        alertMessage.textContent = message;
        alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
        alertContainer.classList.remove('d-none');
        
        // Auto-hide success and info messages after 5 seconds
        if (type === 'success' || type === 'info') {
            setTimeout(() => {
                if (!alertContainer.classList.contains('d-none')) {
                    hideAlert();
                }
            }, 5000);
        }
    }
    
    window.hideAlert = function() {
        alertContainer.classList.add('d-none');
    }

    // Update UI based on mode
    function updateModeUI() {
        const isEncode = encodeMode.checked;
        if (isEncode) {
            inputPaneTitle.innerHTML = '<i class="bi bi-input-cursor me-2"></i>Text Input';
            outputPaneTitle.innerHTML = '<i class="bi bi-file-earmark-code me-2"></i>Base64 Output';
            textInput.placeholder = 'Enter text to encode...';
        } else {
            inputPaneTitle.innerHTML = '<i class="bi bi-file-earmark-code me-2"></i>Base64 Input';
            outputPaneTitle.innerHTML = '<i class="bi bi-input-cursor me-2"></i>Decoded Output';
            textInput.placeholder = 'Enter Base64 to decode...';
        }
    }

    // Update statistics
    function updateStats() {
        const inputLength = textInput.value.length;
        const outputLength = textOutput.textContent.length;
        
        inputStats.textContent = `${inputLength.toLocaleString()} characters`;
        outputStats.textContent = `${outputLength.toLocaleString()} characters`;
        
        if (inputLength > 0) {
            const ratio = encodeMode.checked ? (outputLength / inputLength) : (inputLength / outputLength);
            inputStats.textContent += ` (${(ratio * 100).toFixed(1)}% ratio)`;
        }
    }

    // File upload mode toggle
    fileUploadMode.addEventListener('change', () => {
        if (fileUploadMode.checked) {
            textInput.classList.add('d-none');
            fileInput.classList.remove('d-none');
        } else {
            textInput.classList.remove('d-none');
            fileInput.classList.add('d-none');
        }
    });

    // File input handler
    fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            if (encodeMode.checked) {
                // For encoding, we need binary data
                const arrayBuffer = e.target.result;
                const uint8Array = new Uint8Array(arrayBuffer);
                const binaryString = Array.from(uint8Array, byte => String.fromCharCode(byte)).join('');
                textInput.value = binaryString;
                textInput.dataset.filename = file.name;
                textInput.dataset.mimetype = file.type;
            } else {
                // For decoding, treat as text
                textInput.value = e.target.result;
            }
            updateStats();
        };
        
        if (encodeMode.checked) {
            reader.readAsArrayBuffer(file);
        } else {
            reader.readAsText(file);
        }
    });

    // Mode change handlers
    encodeMode.addEventListener('change', updateModeUI);
    decodeMode.addEventListener('change', updateModeUI);

    // Text input handler
    textInput.addEventListener('input', updateStats);

    // Convert function
    function convertText() {
        hideAlert();
        const input = textInput.value;
        
        if (!input.trim()) {
            showAlert('Please enter some text to convert.');
            return;
        }
        
        try {
            let result;
            
            if (encodeMode.checked) {
                // Encoding
                const base64 = btoa(unescape(encodeURIComponent(input)));
                result = urlSafeMode ? 
                    base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '') : 
                    base64;
            } else {
                // Decoding
                let base64Input = input.trim();
                
                // Handle URL-safe Base64
                if (base64Input.includes('-') || base64Input.includes('_')) {
                    base64Input = base64Input.replace(/-/g, '+').replace(/_/g, '/');
                    // Add padding if needed
                    while (base64Input.length % 4) {
                        base64Input += '=';
                    }
                }
                
                result = decodeURIComponent(escape(atob(base64Input)));
            }
            
            // Format output if enabled
            if (formatOutput && encodeMode.checked) {
                result = result.match(/.{1,76}/g).join('\n');
            }
            
            setOutput(result);
            showAlert('Conversion completed successfully!', 'success');
            
        } catch (e) {
            showAlert(`Conversion failed: ${e.message}`);
        }
    }

    function setOutput(text) {
        textOutput.textContent = text;
        textOutput.dataset.raw = text;
        updateStats();
    }

    // Convert button
    document.getElementById('convertBtn').addEventListener('click', convertText);

    // Copy functions
    async function copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch {
            const ta = document.createElement('textarea');
            ta.value = text;
            document.body.appendChild(ta);
            ta.select();
            try {
                const success = document.execCommand('copy');
                return success;
            } finally {
                document.body.removeChild(ta);
            }
        }
    }

    document.getElementById('copyInputBtn').addEventListener('click', async () => {
        if (await copyToClipboard(textInput.value)) {
            showAlert('Input copied to clipboard!', 'success');
        }
    });

    document.getElementById('copyOutputBtn').addEventListener('click', async () => {
        if (await copyToClipboard(textOutput.dataset.raw || textOutput.textContent)) {
            showAlert('Output copied to clipboard!', 'success');
        }
    });

    // Download functions
    function downloadText(text, fileName, mimeType = 'text/plain') {
        const blob = new Blob([text], { type: `${mimeType};charset=utf-8` });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    document.getElementById('downloadInputBtn').addEventListener('click', () => {
        const ts = new Date().toISOString().replace(/[:.]/g, '-');
        const ext = encodeMode.checked ? 'txt' : 'b64';
        downloadText(textInput.value || '', `input-${ts}.${ext}`);
    });

    document.getElementById('downloadOutputBtn').addEventListener('click', () => {
        const ts = new Date().toISOString().replace(/[:.]/g, '-');
        const ext = encodeMode.checked ? 'b64' : 'txt';
        const text = textOutput.dataset.raw || textOutput.textContent || '';
        
        if (!encodeMode.checked && textInput.dataset.mimetype) {
            // Try to download with original file type
            const originalName = textInput.dataset.filename || `decoded-${ts}`;
            const blob = new Blob([text], { type: textInput.dataset.mimetype });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = originalName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        } else {
            downloadText(text, `output-${ts}.${ext}`);
        }
    });

    // Clear functions
    document.getElementById('clearInputBtn').addEventListener('click', () => {
        textInput.value = '';
        textOutput.textContent = '';
        textOutput.removeAttribute('data-raw');
        delete textInput.dataset.filename;
        delete textInput.dataset.mimetype;
        fileInput.value = '';
        updateStats();
        hideAlert();
    });

    // Swap function
    document.getElementById('swapBtn').addEventListener('click', () => {
        const inputValue = textInput.value;
        const outputValue = textOutput.dataset.raw || textOutput.textContent;
        
        textInput.value = outputValue;
        setOutput(inputValue);
        
        // Toggle mode
        encodeMode.checked = !encodeMode.checked;
        decodeMode.checked = !decodeMode.checked;
        updateModeUI();
    });

    // Upload file button
    document.getElementById('uploadFileBtn').addEventListener('click', () => {
        fileInput.click();
    });

    // Maximize functions
    function toggleMaximize(which) {
        const inputCol = document.getElementById('inputPane');
        const outputCol = document.getElementById('outputPane');
        if (which === 'input') {
            inputCol.classList.toggle('col-lg-12');
            inputCol.classList.toggle('col-lg-6');
            outputCol.classList.toggle('d-none');
        } else {
            outputCol.classList.toggle('col-lg-12');
            outputCol.classList.toggle('col-lg-6');
            inputCol.classList.toggle('d-none');
        }
    }

    document.getElementById('maximizeInputBtn').addEventListener('click', () => toggleMaximize('input'));
    document.getElementById('maximizeOutputBtn').addEventListener('click', () => toggleMaximize('output'));

    // Quick action buttons
    document.getElementById('sampleTextBtn').addEventListener('click', () => {
        const sampleTexts = [
            'Hello, World! This is a sample text for Base64 encoding.',
            'The quick brown fox jumps over the lazy dog.',
            'Base64 is a group of binary-to-text encoding schemes.',
            '{ "name": "John Doe", "age": 30, "city": "New York" }',
            'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'
        ];
        textInput.value = sampleTexts[Math.floor(Math.random() * sampleTexts.length)];
        updateStats();
    });

    document.getElementById('urlSafeBtn').addEventListener('click', () => {
        urlSafeMode = !urlSafeMode;
        const btn = document.getElementById('urlSafeBtn');
        if (urlSafeMode) {
            btn.classList.remove('btn-outline-info');
            btn.classList.add('btn-info');
            showAlert('URL-safe mode enabled. Uses - and _ instead of + and /, no padding.', 'info');
        } else {
            btn.classList.remove('btn-info');
            btn.classList.add('btn-outline-info');
            showAlert('URL-safe mode disabled. Using standard Base64.', 'info');
        }
    });

    document.getElementById('validateBtn').addEventListener('click', () => {
        const input = textInput.value.trim();
        if (!input) {
            showAlert('Please enter Base64 text to validate.');
            return;
        }
        
        try {
            // Test if it's valid Base64
            let testInput = input;
            
            // Handle URL-safe
            if (testInput.includes('-') || testInput.includes('_')) {
                testInput = testInput.replace(/-/g, '+').replace(/_/g, '/');
                while (testInput.length % 4) {
                    testInput += '=';
                }
            }
            
            atob(testInput);
            showAlert('Valid Base64 format!', 'success');
        } catch {
            showAlert('Invalid Base64 format.', 'warning');
        }
    });

    document.getElementById('formatBtn').addEventListener('click', () => {
        formatOutput = !formatOutput;
        const btn = document.getElementById('formatBtn');
        if (formatOutput) {
            btn.classList.remove('btn-outline-warning');
            btn.classList.add('btn-warning');
            showAlert('Output formatting enabled (76 chars per line).', 'info');
        } else {
            btn.classList.remove('btn-warning');
            btn.classList.add('btn-outline-warning');
            showAlert('Output formatting disabled.', 'info');
        }
    });

    // Initialize
    updateModeUI();
    updateStats();
})();
</script>

<style>
    /* Scoped styling */
    #base64-root .card { 
        transition: background-color .2s ease; 
    }

    #base64-root .btn-group .btn-check:checked + .btn {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: white;
    }

    #base64-root pre { 
        white-space: pre-wrap;
        word-break: break-all;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
        font-size: 0.9rem;
    }

    #base64-root .form-check-input:checked {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
    }

    #base64-root .alert {
        border-radius: 10px;
        border: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    #base64-root .card {
        border-radius: 12px;
        border: none;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    }

    #base64-root .card-header {
        background: linear-gradient(145deg, var(--bs-body-bg) 0%, var(--bs-secondary-bg) 100%);
        border-bottom: 1px solid var(--bs-border-color);
        border-radius: 12px 12px 0 0;
    }

    #base64-root .btn {
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    #base64-root .btn:hover {
        transform: translateY(-1px);
    }

    #base64-root .form-control, #base64-root pre {
        border-radius: 8px;
        border: 2px solid var(--bs-border-color);
        transition: border-color 0.3s ease;
    }

    #base64-root .form-control:focus {
        border-color: var(--bs-primary);
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
    }

    /* Dark theme adjustments */
    [data-bs-theme="dark"] #base64-root .card {
        background-color: var(--bs-dark);
    }

    [data-bs-theme="dark"] #base64-root .card-header {
        background: linear-gradient(145deg, var(--bs-dark) 0%, var(--bs-body-bg) 100%);
    }

    [data-bs-theme="dark"] #base64-root pre {
        background-color: var(--bs-gray-800) !important;
        color: var(--bs-body-color);
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        #base64-root .card-header .btn-group {
            flex-direction: column;
            gap: 0.25rem;
        }
        
        #base64-root .card-header .btn-group .btn {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
    }
</style>
}